@implements IDisposable
@using System.Security.Principal
@inject AuthenticationStateProvider stateProvider

<AuthorizeView>
    Hello, @user.Identity.Name!
</AuthorizeView>

@functions
{
    IPrincipal user { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = (await stateProvider.GetAuthenticationStateAsync()).User;
        stateProvider.AuthenticationStateChanged += AuthenticationStateChangedHandler;
    }

    protected async void AuthenticationStateChangedHandler(Task<AuthenticationState> task)
    {
        var state = await task;
        user = state.User;

        await InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        stateProvider.AuthenticationStateChanged -= AuthenticationStateChangedHandler;
    }
}