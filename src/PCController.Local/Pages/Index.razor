@page "/"
@inherits PCControllerComponentBase

@inject IPinHandler _pinAuthenticationStateProvider
@inject IControllerService _controller
@inject IRemoteServersProvider _remoteServersProvider
@inject ISignalRManager _statusHub

<h1>Hello!</h1>

<div class="form-group">
    <label for="pin">PIN</label>
    <input type="password" class="form-control" id="pin" placeholder="PIN" @bind-value="_pinAuthenticationStateProvider.PIN">
</div>
<AuthorizeView>
    <div class="card-group">
        @if (_controller.IsPlatformSupported)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">LOCAL</h5>
                    <p class="card-text">Lorem ipsum.</p>

                    @foreach (var command in Enum.GetValues(typeof(Command))
.Cast<Command>())
                    {
                        <button type="button" class="btn btn-info" @onclick="async () => await _controller.InvokeCommandAsync(command, System.Threading.CancellationToken.None)">@command</button>
                    }
                </div>
            </div>
        }

        @foreach (var remoteServer in _remoteServersProvider.RemoteServers)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@remoteServer.Id </h5>
                    <p class="card-text">@remoteServer.Uri </p>
                    <p class="card-text">@(onlineStatuses.TryGetValue(remoteServer, out var res) ? res : OnlineStatus.Unknown)</p>
                    <p class="card-text">
                        @if (_statusHub.IsConnected(remoteServer.Id))
                        {
                            <text>
                                Machine is connected back to this one
                            </text>
                        }
                        else
                        {
                            <text>
                                Machine is NOT connected back to this one
                            </text>

                        }
                    </p>
                    <button type="button" disabled="@((onlineStatuses.TryGetValue(remoteServer, out var res3) ? res3 : OnlineStatus.Unknown) != OnlineStatus.Offline)" class="btn btn-info" @onclick="async () => await remoteServer.TryToWakeUpAsync(System.Threading.CancellationToken.None)">WakeUp</button>
                    @foreach (var command in Enum.GetValues(typeof(Command))
.Cast<Command>())
                    {
                        <button type="button" disabled="@((onlineStatuses.TryGetValue(remoteServer, out var res2) ? res2 : OnlineStatus.Unknown) != OnlineStatus.ServerOnline)" class="btn btn-info" @onclick="async () => await remoteServer.InvokeCommandAsync(command, System.Threading.CancellationToken.None)">@command</button>
                    }
                </div>
            </div>
        }

        @foreach (var extraId in _statusHub.ConnectedIds.Except(_remoteServersProvider.RemoteServers.Select(o => o.Id)))
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@extraId</h5>
                    <p class="card-text">???</p>
                    <p class="card-text">@(OnlineStatus.ServerOnline)</p>
                    <p class="card-text">
                        Machine is connected back to this one
                    </p>
                    <button type="button" disabled="@true" class="btn btn-info">WakeUp</button>
                    @foreach (var command in Enum.GetValues(typeof(Command))
.Cast<Command>())
                    {
                        <button type="button" class="btn btn-info">@command</button>
                    }
                </div>
            </div>
        }
    </div>
</AuthorizeView>

@functions {

    private readonly Dictionary<RemoteServer, OnlineStatus> onlineStatuses = new Dictionary<RemoteServer, OnlineStatus>();

    protected override async Task OnAfterFirstRenderAsync()
    {
        await base.OnAfterFirstRenderAsync();

        await _pinAuthenticationStateProvider.InitializeJSAsync();
        StateHasChanged();

        foreach (var remoteServer in _remoteServersProvider.RemoteServers)
        {
            remoteServer.IsOnline
                .SubscribeAsync(async (o, c) =>
                {
                    await InvokeAsync(() =>
                    {
                        if (c.IsCancellationRequested)
                        {
                            return;
                        }
                        onlineStatuses[remoteServer] = o;
                        StateHasChanged();
                    });
                })
                .TrackSubscription(this);
        }
        _statusHub.OnlineStatusChanged += ConcurentStateHasChanged;
    }

    private void ConcurentStateHasChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public override void Dispose()
    {
        base.Dispose();

        _statusHub.OnlineStatusChanged -= ConcurentStateHasChanged;
    }
}