@page "/"
@using System.Threading
@inherits PcControllerComponentBase

@inject IPinHandler PinAuthenticationStateProvider
@inject IEnumerable<IRemoteServersProvider> RemoteServersProviders

<h1>Hello!</h1>

<div class="form-group">
    <label for="pin">PIN</label>
    <input type="password" class="form-control" id="pin" placeholder="PIN" @bind-value="PinAuthenticationStateProvider.Pin">
</div>
<AuthorizeView>

    @foreach (var provider in RemoteServersProviders)
    {
        <div class="card-group">
            @provider.GetType().Name

            @foreach (var remoteServer in Bind(provider.RemoteServers))
            {
                var onlineStatus = Bind(remoteServer.IsOnline);

                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">@remoteServer.MachineName </h5>
                        @foreach (var info in remoteServer.AdditionalInfo)
                        {
                            <p class="card-text">@info.key : @info.value </p>
                        }
                        <p class="card-text">@onlineStatus</p>
                        @* <button type="button" disabled="@(onlineStatus != OnlineStatus.Offline)" class="btn btn-info" @onclick="async () => await remoteServer.TryToWakeUpAsync(CancellationToken.None)">WakeUp</button> *@
                        @foreach (var command in Enum.GetValues(typeof(Command))
                            .Cast<Command>())
                        {
                            <button type="button" disabled="@(onlineStatus != OnlineStatus.ServerOnline)" class="btn btn-info" @onclick="async () => await remoteServer.InvokeCommandAsync(command, CancellationToken.None)">@command</button>
                        }
                    </div>
                </div>
            }
        </div>
    }

</AuthorizeView>

@functions {

    protected override async Task OnAfterFirstRenderAsync()
    {
        await base.OnAfterFirstRenderAsync();

        await PinAuthenticationStateProvider.InitializeJsAsync();
    }

    public override void Dispose()
    {
        base.Dispose();
    }

}