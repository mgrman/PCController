@page "/"
@implements IDisposable

@inject IPinHandler _pinAuthenticationStateProvider
@inject IControllerService _controller
@inject IRemoteControllerService _remoteController

<h1>Hello!</h1>

<div class="form-group">
    <label for="pin">PIN</label>
    <input type="password" class="form-control" id="pin" placeholder="PIN" @bind-value="_pinAuthenticationStateProvider.PIN">
</div>
<AuthorizeView>
    <div class="card-group">
        @if (_controller.IsPlatformSupported)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">LOCAL</h5>
                    <p class="card-text">Lorem ipsum.</p>

                    @foreach (var command in Enum.GetValues(typeof(Command)).Cast<Command>())
                    {
                        <button type="button" class="btn btn-info" @onclick="async () => await _controller.InvokeCommandAsync(command, System.Threading.CancellationToken.None)">@command</button>
                    }
                </div>
            </div>
        }

        @foreach (var remoteServer in _remoteController.RemoteServers)
        {

            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@remoteServer.Uri</h5>
                    <p class="card-text">@(onlineStatuses.TryGetValue(remoteServer, out var res)?res: OnlineStatus.Unknown)</p>

                    <button type="button" class="btn btn-info" @onclick="async()=> await   _remoteController.WakeUpAsync(remoteServer,System.Threading.CancellationToken.None)">WakeUp</button>
                    @foreach (var command in Enum.GetValues(typeof(Command)).Cast<Command>())
                    {
                        <button type="button" disabled="@((onlineStatuses.TryGetValue(remoteServer, out var res2)?res2: OnlineStatus.Unknown)!= OnlineStatus.ServerOnline)" class="btn btn-info" @onclick="async()=> await   _remoteController.InvokeCommandAsync(command,remoteServer,System.Threading.CancellationToken.None)">@command</button>
                    }
                </div>
            </div>

        }
    </div>
</AuthorizeView>

@functions {

    private readonly List<IDisposable> disposables = new List<IDisposable>();
    private readonly Dictionary<RemoteServer, OnlineStatus> onlineStatuses = new Dictionary<RemoteServer, OnlineStatus>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var change = await _pinAuthenticationStateProvider.InitializeJSAsync();
        if (change)
        {
            StateHasChanged();
        }

    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        foreach (var remoteServer in _remoteController.RemoteServers)
        {
            var disposable = _remoteController.IsOnline(remoteServer)
                .Subscribe(o =>
                {
                    onlineStatuses[remoteServer] = o;
                    StateHasChanged();
                });
            disposables.Add(disposable);
        }
    }

    public void Dispose()
    {
        foreach (var disposable in disposables)
        {
            disposable.Dispose();
        }
    }

}